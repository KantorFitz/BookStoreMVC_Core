// <auto-generated />
using System;
using BookStoreProject.UI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStoreProject.UI.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20220702224637_Seeded3")]
    partial class Seeded3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStoreProject.UI.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4eb704ce-d1be-4e1e-8be7-adb51e1a4eca"),
                            Name = "Jesse",
                            Surname = "Gomez"
                        },
                        new
                        {
                            Id = new Guid("3f94c937-82a7-4015-a553-cf4068390f80"),
                            Name = "Anita",
                            Surname = "Gonzalez"
                        },
                        new
                        {
                            Id = new Guid("d78fca12-6e6b-497f-88cc-1dfccc674bf9"),
                            Name = "Erik",
                            Surname = "Edwards"
                        });
                });

            modelBuilder.Entity("BookStoreProject.UI.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookAuthorId");

                    b.HasIndex("BookGenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookStoreProject.UI.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8535de2-9c48-4b1b-9aac-e895c8ad7a18"),
                            Description = "A historical genre",
                            Name = "Historical"
                        },
                        new
                        {
                            Id = new Guid("779f36aa-0236-4323-b810-b012a3264289"),
                            Description = "A Mystery genre",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("823cfe90-e616-4004-bd11-1d91a1111e1d"),
                            Description = "A Comedy genre",
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("BookStoreProject.UI.Entities.Opinion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Opinion");
                });

            modelBuilder.Entity("BookStoreProject.UI.Entities.Book", b =>
                {
                    b.HasOne("BookStoreProject.UI.Entities.Author", null)
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");

                    b.HasOne("BookStoreProject.UI.Entities.Author", "BookAuthor")
                        .WithMany()
                        .HasForeignKey("BookAuthorId");

                    b.HasOne("BookStoreProject.UI.Entities.Genre", "BookGenre")
                        .WithMany()
                        .HasForeignKey("BookGenreId");

                    b.HasOne("BookStoreProject.UI.Entities.Genre", null)
                        .WithMany("Books")
                        .HasForeignKey("GenreId");

                    b.Navigation("BookAuthor");

                    b.Navigation("BookGenre");
                });

            modelBuilder.Entity("BookStoreProject.UI.Entities.Opinion", b =>
                {
                    b.HasOne("BookStoreProject.UI.Entities.Book", "BookOpinion")
                        .WithMany("Opinions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookOpinion");
                });

            modelBuilder.Entity("BookStoreProject.UI.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreProject.UI.Entities.Book", b =>
                {
                    b.Navigation("Opinions");
                });

            modelBuilder.Entity("BookStoreProject.UI.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
